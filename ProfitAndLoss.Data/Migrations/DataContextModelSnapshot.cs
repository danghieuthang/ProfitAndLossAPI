// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProfitAndLoss.Data.Models;

namespace ProfitAndLoss.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.AccountingPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("AccountingPeriods");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.AccountingPeriodInStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountingPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("AccountingPeriodId");

                    b.HasIndex("StoreId");

                    b.ToTable("AccountingPeriodInStore");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05fe5bba-65ad-4b71-a5dd-08d878376f22"),
                            Actived = true,
                            Code = "B-PL",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 196, DateTimeKind.Local).AddTicks(1218),
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 196, DateTimeKind.Local).AddTicks(1238)
                        });
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Evidence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Evidences");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountingPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("AccountingPeriodId");

                    b.HasIndex("MemberId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8548c9c2-c656-4937-a6c4-a7885215c7c3"),
                            Actived = true,
                            BrandId = new Guid("05fe5bba-65ad-4b71-a5dd-08d878376f22"),
                            Code = "HCM-01",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 196, DateTimeKind.Local).AddTicks(7517),
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 196, DateTimeKind.Local).AddTicks(8255),
                            Name = "Văn phòng quyền lực HCM"
                        },
                        new
                        {
                            Id = new Guid("f58e642a-c6e9-442f-b3c2-6a36c68eadd2"),
                            Actived = true,
                            BrandId = new Guid("05fe5bba-65ad-4b71-a5dd-08d878376f22"),
                            Code = "HN-01",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 196, DateTimeKind.Local).AddTicks(9007),
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 196, DateTimeKind.Local).AddTicks(9025),
                            Name = "Văn phòng quyền lực Hà Nội"
                        });
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.StoreAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreAccounts");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a17bf0b9-14f3-4d15-9af3-52cef1a952ab"),
                            Actived = true,
                            Address = "This is address of hp company",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(7280),
                            Email = "hpcompany@hp.com",
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(7289),
                            Name = "HP",
                            Phone = "090022333"
                        },
                        new
                        {
                            Id = new Guid("d7a87bf0-1c15-4498-8563-568bd73fa393"),
                            Actived = true,
                            Address = "This is address of Dell company",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(7362),
                            Email = "dellcompany@dell.com",
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(7364),
                            Name = "Dell",
                            Phone = "0977737014"
                        });
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<double>("AmountPaid")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("CreateMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<double>("DueBalance")
                        .HasColumnType("float");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ShippingFee")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalBalance")
                        .HasColumnType("float");

                    b.Property<Guid?>("TransactionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreateMemberId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.TransactionCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDebit")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("TransactionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("TransactionCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98fa66c5-a08c-4a54-b5b2-0280bc9db7d5"),
                            Actived = true,
                            Code = "SAL-PS",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(2408),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(2417),
                            Name = "Product Sale",
                            TransactionTypeId = new Guid("befe9e61-30c9-4594-8a26-5672d1d66e52")
                        },
                        new
                        {
                            Id = new Guid("6080d750-69d9-4554-97f5-5f90aed3e407"),
                            Actived = true,
                            Code = "SAL-COGS",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3176),
                            IsDebit = false,
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3183),
                            Name = "Cost of goods sold",
                            TransactionTypeId = new Guid("befe9e61-30c9-4594-8a26-5672d1d66e52")
                        },
                        new
                        {
                            Id = new Guid("46d00600-ab35-494a-a131-26e224fdf49c"),
                            Actived = true,
                            Code = "INV-INVENTORY",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3208),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3210),
                            Name = "Inventory",
                            TransactionTypeId = new Guid("c1684003-c94f-4c7e-af92-5fc31c4efa48")
                        },
                        new
                        {
                            Id = new Guid("528023f6-2c14-42b9-9ae3-da31bd47681b"),
                            Actived = true,
                            Code = "INV-DIS",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3216),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3217),
                            Name = "Inventory Discount",
                            TransactionTypeId = new Guid("c1684003-c94f-4c7e-af92-5fc31c4efa48")
                        },
                        new
                        {
                            Id = new Guid("153de902-209e-4028-bde5-f09248dc8166"),
                            Actived = true,
                            Code = "REV-COMMON",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3222),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3224),
                            Name = "Common Revenues",
                            TransactionTypeId = new Guid("e4b06925-d89f-41ae-a495-5db8ab3dcfe9")
                        },
                        new
                        {
                            Id = new Guid("3c34f156-0d69-4958-8bf9-0fa52f26eb0f"),
                            Actived = true,
                            Code = "REV-PAKING",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3229),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3230),
                            Name = "Paking Revenues",
                            TransactionTypeId = new Guid("e4b06925-d89f-41ae-a495-5db8ab3dcfe9")
                        },
                        new
                        {
                            Id = new Guid("baf36592-b92d-4774-bf11-0b7357301df3"),
                            Actived = true,
                            Code = "REV-BRAND",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3254),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3255),
                            Name = "Brand Revenues",
                            TransactionTypeId = new Guid("e4b06925-d89f-41ae-a495-5db8ab3dcfe9")
                        },
                        new
                        {
                            Id = new Guid("df0bf15a-4357-4faa-8a3f-6ac092b6f1ec"),
                            Actived = true,
                            Code = "EXP-WAGES",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3263),
                            IsDebit = false,
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3265),
                            Name = "Wages Expense",
                            TransactionTypeId = new Guid("d59d5f6c-5fc1-4977-8f17-a8f78556bf6e")
                        },
                        new
                        {
                            Id = new Guid("1b58ab8f-7288-4144-92c3-e9b4baa4f521"),
                            Actived = true,
                            Code = "EXP-SHIP",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3271),
                            IsDebit = false,
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3272),
                            Name = "Shipping Fee",
                            TransactionTypeId = new Guid("d59d5f6c-5fc1-4977-8f17-a8f78556bf6e")
                        },
                        new
                        {
                            Id = new Guid("18a8d756-19a9-4e7a-ab4b-e3438c43c9e8"),
                            Actived = true,
                            Code = "EXP-DIS",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3277),
                            IsDebit = false,
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 197, DateTimeKind.Local).AddTicks(3279),
                            Name = "Discount",
                            TransactionTypeId = new Guid("d59d5f6c-5fc1-4977-8f17-a8f78556bf6e")
                        });
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.TransactionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountingPeriodInStoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("TransactionCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountingPeriodInStoreId");

                    b.HasIndex("TransactionCategoryId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionDetails");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.TransactionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionHistories");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDebit")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("befe9e61-30c9-4594-8a26-5672d1d66e52"),
                            Actived = true,
                            Code = "SAL",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 192, DateTimeKind.Local).AddTicks(9161),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 194, DateTimeKind.Local).AddTicks(391),
                            Name = "Sales"
                        },
                        new
                        {
                            Id = new Guid("e4b06925-d89f-41ae-a495-5db8ab3dcfe9"),
                            Actived = true,
                            Code = "REV",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 194, DateTimeKind.Local).AddTicks(2126),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 194, DateTimeKind.Local).AddTicks(2209),
                            Name = "Revenues"
                        },
                        new
                        {
                            Id = new Guid("c1684003-c94f-4c7e-af92-5fc31c4efa48"),
                            Actived = true,
                            Code = "INV",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 194, DateTimeKind.Local).AddTicks(2236),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 194, DateTimeKind.Local).AddTicks(2239),
                            Name = "Invoice"
                        },
                        new
                        {
                            Id = new Guid("d59d5f6c-5fc1-4977-8f17-a8f78556bf6e"),
                            Actived = true,
                            Code = "EXP",
                            CreatedDate = new DateTime(2020, 11, 13, 9, 19, 41, 194, DateTimeKind.Local).AddTicks(2244),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 13, 9, 19, 41, 194, DateTimeKind.Local).AddTicks(2246),
                            Name = "Expenses"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProfitAndLoss.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Account", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Brand", "Brand")
                        .WithMany("Accounts")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.AccountingPeriod", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Brand", null)
                        .WithMany("AccountingPeriods")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.AccountingPeriodInStore", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AccountingPeriod", "AccountingPeriod")
                        .WithMany("AccountingPeriodInStores")
                        .HasForeignKey("AccountingPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProfitAndLoss.Data.Models.Store", "Store")
                        .WithMany("AccountingPeriodInStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Evidence", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Receipt", "Receipt")
                        .WithMany("Evidences")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Feedback", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AccountingPeriod", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountingPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProfitAndLoss.Data.Models.Member", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Member", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Receipt", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Store", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Brand", "Brand")
                        .WithMany("Stores")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.StoreAccount", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Account", "Account")
                        .WithMany("StoreAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProfitAndLoss.Data.Models.Store", "Store")
                        .WithMany("StoreAccounts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Transaction", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Member", "Member")
                        .WithMany("Transactions")
                        .HasForeignKey("CreateMemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProfitAndLoss.Data.Models.Store", "Store")
                        .WithMany("Transactions")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProfitAndLoss.Data.Models.Supplier", "Supplier")
                        .WithMany("Transactions")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProfitAndLoss.Data.Models.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.TransactionCategory", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Account", "Account")
                        .WithMany("TransactionCategories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProfitAndLoss.Data.Models.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.TransactionDetail", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AccountingPeriodInStore", "AccountingPeriodInStore")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("AccountingPeriodInStoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProfitAndLoss.Data.Models.TransactionCategory", "TransactionCategory")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProfitAndLoss.Data.Models.Transaction", "Transaction")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.TransactionHistory", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Transaction", null)
                        .WithMany("TransactionHistories")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
