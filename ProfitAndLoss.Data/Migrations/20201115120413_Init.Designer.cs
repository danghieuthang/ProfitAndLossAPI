// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProfitAndLoss.Data.Models;

namespace ProfitAndLoss.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201115120413_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.AccountingPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("AccountingPeriods");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.AccountingPeriodInStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountingPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("AccountingPeriodId");

                    b.HasIndex("StoreId");

                    b.ToTable("AccountingPeriodInStore");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05fe5bba-65ad-4b71-a5dd-08d878376f22"),
                            Actived = true,
                            Code = "B-PL",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 89, DateTimeKind.Local).AddTicks(412),
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 89, DateTimeKind.Local).AddTicks(435)
                        });
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Evidence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Evidences");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountingPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("AccountingPeriodId");

                    b.HasIndex("MemberId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ddde612-d65d-4a0f-aac9-fd9db896afda"),
                            Actived = true,
                            BrandId = new Guid("05fe5bba-65ad-4b71-a5dd-08d878376f22"),
                            Code = "HCM-01",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 89, DateTimeKind.Local).AddTicks(6914),
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 89, DateTimeKind.Local).AddTicks(7653),
                            Name = "Văn phòng quyền lực HCM"
                        },
                        new
                        {
                            Id = new Guid("febb5019-66b7-408b-9731-16314dece341"),
                            Actived = true,
                            BrandId = new Guid("05fe5bba-65ad-4b71-a5dd-08d878376f22"),
                            Code = "HN-01",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 89, DateTimeKind.Local).AddTicks(8438),
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 89, DateTimeKind.Local).AddTicks(8456),
                            Name = "Văn phòng quyền lực Hà Nội"
                        });
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.StoreAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreAccounts");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e62f7f94-fc5c-4c2e-8b3e-4b94f699d238"),
                            Actived = true,
                            Address = "This is address of hp company",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(6846),
                            Email = "hpcompany@hp.com",
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(6855),
                            Name = "HP",
                            Phone = "090022333"
                        },
                        new
                        {
                            Id = new Guid("d673219e-4546-4717-894f-cd81b4ebf025"),
                            Actived = true,
                            Address = "This is address of Dell company",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(6925),
                            Email = "dellcompany@dell.com",
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(6927),
                            Name = "Dell",
                            Phone = "0977737014"
                        });
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<double>("AmountPaid")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("CreateMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<double>("DueBalance")
                        .HasColumnType("float");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ShippingFee")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalBalance")
                        .HasColumnType("float");

                    b.Property<Guid?>("TransactionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreateMemberId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.TransactionCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDebit")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("TransactionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("TransactionCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ddb84cc-0c1f-46b5-8c47-57e22b9c1aa5"),
                            Actived = true,
                            Code = "SAL-PS",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(2163),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(2172),
                            Name = "Product Sale",
                            TransactionTypeId = new Guid("befe9e61-30c9-4594-8a26-5672d1d66e52")
                        },
                        new
                        {
                            Id = new Guid("9cf0ca58-8245-4c16-a19e-bcd4a75ab5c7"),
                            Actived = true,
                            Code = "SAL-COGS",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(2971),
                            IsDebit = false,
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(2978),
                            Name = "Cost of goods sold",
                            TransactionTypeId = new Guid("befe9e61-30c9-4594-8a26-5672d1d66e52")
                        },
                        new
                        {
                            Id = new Guid("16e81eae-8b55-4acd-9202-7e5b0fb91688"),
                            Actived = true,
                            Code = "INV-INVENTORY",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(3004),
                            IsDebit = false,
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(3006),
                            Name = "Inventory",
                            TransactionTypeId = new Guid("c1684003-c94f-4c7e-af92-5fc31c4efa48")
                        },
                        new
                        {
                            Id = new Guid("3c8a93b7-f477-4b59-8b68-79239ae4f11c"),
                            Actived = true,
                            Code = "REV-COMMON",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(3013),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(3015),
                            Name = "Common Revenues",
                            TransactionTypeId = new Guid("e4b06925-d89f-41ae-a495-5db8ab3dcfe9")
                        },
                        new
                        {
                            Id = new Guid("c5626da0-7dbf-4015-bf9d-2cc8daf42ce7"),
                            Actived = true,
                            Code = "REV-PAKING",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(3021),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(3022),
                            Name = "Paking Revenues",
                            TransactionTypeId = new Guid("e4b06925-d89f-41ae-a495-5db8ab3dcfe9")
                        },
                        new
                        {
                            Id = new Guid("cfc3145a-6eca-428b-9d68-4da631c54a18"),
                            Actived = true,
                            Code = "REV-BRAND",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(3043),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(3045),
                            Name = "Brand Revenues",
                            TransactionTypeId = new Guid("e4b06925-d89f-41ae-a495-5db8ab3dcfe9")
                        },
                        new
                        {
                            Id = new Guid("4f4a9916-3388-4c29-a734-04246304c60c"),
                            Actived = true,
                            Code = "EXP-WAGES",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(3052),
                            IsDebit = false,
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(3053),
                            Name = "Wages Expense",
                            TransactionTypeId = new Guid("d59d5f6c-5fc1-4977-8f17-a8f78556bf6e")
                        },
                        new
                        {
                            Id = new Guid("6a0eec6e-8f35-4dce-91e9-4cd2fba41747"),
                            Actived = true,
                            Code = "EXP-SHIP",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(3058),
                            IsDebit = false,
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(3060),
                            Name = "Shipping Fee",
                            TransactionTypeId = new Guid("d59d5f6c-5fc1-4977-8f17-a8f78556bf6e")
                        },
                        new
                        {
                            Id = new Guid("8a9773ca-6963-4462-a70e-d50033a2d4b4"),
                            Actived = true,
                            Code = "SAL-DIS",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(3065),
                            IsDebit = false,
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 90, DateTimeKind.Local).AddTicks(3067),
                            Name = "Discount",
                            TransactionTypeId = new Guid("befe9e61-30c9-4594-8a26-5672d1d66e52")
                        });
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.TransactionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountingPeriodInStoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("TransactionCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountingPeriodInStoreId");

                    b.HasIndex("TransactionCategoryId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionDetails");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.TransactionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionHistories");
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDebit")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("befe9e61-30c9-4594-8a26-5672d1d66e52"),
                            Actived = true,
                            Code = "SAL",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 85, DateTimeKind.Local).AddTicks(7054),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 86, DateTimeKind.Local).AddTicks(9105),
                            Name = "Sales"
                        },
                        new
                        {
                            Id = new Guid("e4b06925-d89f-41ae-a495-5db8ab3dcfe9"),
                            Actived = true,
                            Code = "REV",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 87, DateTimeKind.Local).AddTicks(906),
                            IsDebit = true,
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 87, DateTimeKind.Local).AddTicks(950),
                            Name = "Revenues"
                        },
                        new
                        {
                            Id = new Guid("c1684003-c94f-4c7e-af92-5fc31c4efa48"),
                            Actived = true,
                            Code = "INV",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 87, DateTimeKind.Local).AddTicks(978),
                            IsDebit = false,
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 87, DateTimeKind.Local).AddTicks(980),
                            Name = "Invoice"
                        },
                        new
                        {
                            Id = new Guid("d59d5f6c-5fc1-4977-8f17-a8f78556bf6e"),
                            Actived = true,
                            Code = "EXP",
                            CreatedDate = new DateTime(2020, 11, 15, 19, 4, 13, 87, DateTimeKind.Local).AddTicks(985),
                            IsDebit = false,
                            ModifiedDate = new DateTime(2020, 11, 15, 19, 4, 13, 87, DateTimeKind.Local).AddTicks(987),
                            Name = "Expenses"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProfitAndLoss.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Account", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Brand", "Brand")
                        .WithMany("Accounts")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.AccountingPeriod", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Brand", null)
                        .WithMany("AccountingPeriods")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.AccountingPeriodInStore", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AccountingPeriod", "AccountingPeriod")
                        .WithMany("AccountingPeriodInStores")
                        .HasForeignKey("AccountingPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProfitAndLoss.Data.Models.Store", "Store")
                        .WithMany("AccountingPeriodInStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Evidence", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Receipt", "Receipt")
                        .WithMany("Evidences")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Feedback", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AccountingPeriod", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountingPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProfitAndLoss.Data.Models.Member", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Member", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Receipt", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Store", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Brand", "Brand")
                        .WithMany("Stores")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.StoreAccount", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Account", "Account")
                        .WithMany("StoreAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProfitAndLoss.Data.Models.Store", "Store")
                        .WithMany("StoreAccounts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.Transaction", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Member", "Member")
                        .WithMany("Transactions")
                        .HasForeignKey("CreateMemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProfitAndLoss.Data.Models.Store", "Store")
                        .WithMany("Transactions")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProfitAndLoss.Data.Models.Supplier", "Supplier")
                        .WithMany("Transactions")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProfitAndLoss.Data.Models.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.TransactionCategory", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Account", "Account")
                        .WithMany("TransactionCategories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProfitAndLoss.Data.Models.TransactionType", "TransactionType")
                        .WithMany("TransactionCategories")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.TransactionDetail", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.AccountingPeriodInStore", "AccountingPeriodInStore")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("AccountingPeriodInStoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProfitAndLoss.Data.Models.TransactionCategory", "TransactionCategory")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProfitAndLoss.Data.Models.Transaction", "Transaction")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ProfitAndLoss.Data.Models.TransactionHistory", b =>
                {
                    b.HasOne("ProfitAndLoss.Data.Models.Transaction", null)
                        .WithMany("TransactionHistories")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
